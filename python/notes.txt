
make separate receive thread in samd

run samchat, samweb, samcli together

make them all three go thru samd

move users and groups from webchat to reception

make wsgi stub
	link it into passenger_wsgi
	link it into samweb

goal:  create two clones and let them have a human conversation together

support clones
	clones = []
	clone.append(Sam('Sam'))
	clone.append(Sam('Lee'))

class User:
	def __init__(self):
		self.uuid = ''  # unique id 
		self.name = ''  # human readable name 
		self.personality = {}
		self.memory = {}

	def getuuid(self):
		pass

	def save(self):
		# write to database
		pass

	def restore(self):
		# read from database
		pass

class Human(User):
	def __init__(self):
		self.vocab = {}

	def isHuman(self):
		return True

class Clone(User):
	def __init__(self):
		self.host =   # ip 
		self.port =   # unique port assignement
		self.pid =    # each clone is a daemon process running samd

	def isHuman(self):
		return False

	def announce(self):
		# announce my presence to the world
		pass
	
	def getport(self):
		pass

db
	is it really necessary to have a central db?
	what about a distributed db?

	use db for grammar
	if central db can be found on inet
	grammar is necessary for communicating with humans

message passing
	send to everyone
	first guy to accept it stops the broadcast

human protocols
	languages are sometimes mixed
	sawat di krup.  see you.

commuter can reduce a sentence to numbers, word ids
	subject adj verb adv object adj
	subject adj verb adv nominative adj

human languages screw with word order
	computer should maybe be flexible with word order
	part of deconstructing a human utterance is untangling the word order

