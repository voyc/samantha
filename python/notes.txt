
x make separate receive thread in samd

break down samchat: lobby vs chat.  Think.  Where do we want lobby?  Chat or Sam
	to support cli, it has to be in sam, not chat
	chat could be a nice standalone server
	if lobby is in chat, will sam know about the groups?
	what does sam need to know about the groups?
	he's going to be conducting a four-way conversation between student, coach, self, and drill sargeant

samd switchboard is a websockets server built on asyncio
	every incoming message is passed to security 
	in a concurrent.futures thread pool executor
	therefore, we don't have to keep using the async/await syntax outside of switchboard

edit samd
	build webchat code into switchboard, replacing ipc
	when switchboard calls security, invoke thread pool executor

run samchat, samweb, samcli together

make them all three go thru samd

move users and groups from webchat to reception

make wsgi stub
	link it into passenger_wsgi
	link it into samweb

goal:  create two clones and let them have a human conversation together

support clones
	clones = []
	clone.append(Sam('Sam'))
	clone.append(Sam('Lee'))

class User:
	def __init__(self):
		self.uuid = ''  # unique id 
		self.name = ''  # human readable name 
		self.personality = {}
		self.memory = {}

	def getuuid(self):
		pass

	def save(self):
		# write to database
		pass

	def restore(self):
		# read from database
		pass

class Human(User):
	def __init__(self):
		self.vocab = {}

	def isHuman(self):
		return True

class Clone(User):
	def __init__(self):
		self.host =   # ip 
		self.port =   # unique port assignement
		self.pid =    # each clone is a daemon process running samd

	def isHuman(self):
		return False

	def announce(self):
		# announce my presence to the world
		pass
	
	def getport(self):
		pass

db
	is it really necessary to have a central db?
	what about a distributed db?

	use db for grammar
	if central db can be found on inet
	grammar is necessary for communicating with humans

message passing
	send to everyone
	first guy to accept it stops the broadcast

human protocols
	languages are sometimes mixed
	sawat di krup.  see you.

commuter can reduce a sentence to numbers, word ids
	subject adj verb adv object adj
	subject adj verb adv nominative adj

human languages screw with word order
	computer should maybe be flexible with word order
	part of deconstructing a human utterance is untangling the word order

what if protocols are extended to include regurgitation of stories from local news media?

inter-clone conversation
	each clone has an address, ip:port, 127.0.0.1:5795
	each clone has a server socket
	when one clone wants to talk to another
		he can create a client socket to do so
	can a python program use a websocket directly, without the http server?
		or would he use something like wget?


