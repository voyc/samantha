identify speakers
	Sam: sam, 35, f
	John: human, 58, m

1. Sam, set Subj = you, say 1 of 3 sentences
	bai nai, verb = go
2. John, reply I go raan cafe

3. Sam, subj=you, verb=go, where=raan cofe 
	advs about go
	adjs about cafe
	lookup potential next sentence
	followup questions 
	switch subj to raan cafe and ask questions about that

root is S
	s 
	v
		to bank	
			on the corner
			KBank
			green


programs to support conversation generation 

	goals:
		choose next sentence: question or answer, based on the conversational grammar	
			by default, dispatcher calls broca::converse()
			make broca call congen.gen()  in congen.py
			new program, maybe fold into grammar.py later

		sleep: convert conversation to memories	
	prereq:
		design data structure that can accomodate the sentence construction and allow adv and adj to be added gradually
		$refer()  back-reference subj, verb, object
		define speakers by gender, age
		$pronoun(person=2, gender=m, number=s, age=younger)
		$date
		$time
		$dayofweek
		$country
		$city
		$businessname  $typeof(@businessname)
		$polite() based on speaker's gender
		when to add @polite


x pass Message object between Client and Server, samd and samcli, use string name for from and to, later replaced with token
x complete dispatch
- add modes: echo, converse, translate, drill
- add sleep
- build out Reception from samchat, users and groups, archive samchat
- samcli, print proper message when connection fails because server not up
- reimplement samcli as Human, loading skill connect, wrapping comm.Client, plus keyboard (skill?)
- implement skill converse
- implement leed, with skills connect and converse, conversing with samd
- implement security, account, built into converse: "what is your name?" "do you really want to change your password?"
- test with webserver
- simulate user vs instantiate sam
- do translate, sengen, numgen
- drill basic
- drill language


make wsgi stub
	link it into passenger_wsgi
	link it into samweb

goal:  create two clones and let them have a human conversation together

support clones
	clones = []
	clone.append(Sam('Sam'))
	clone.append(Sam('Lee'))

message passing
	send to everyone
	first guy to accept it stops the broadcast

human protocols
	languages are sometimes mixed
	sawat di krup.  see you.

commuter can reduce a sentence to numbers, word ids
	subject adj verb adv object adj
	subject adj verb adv nominative adj

human languages screw with word order
	computer should maybe be flexible with word order
	part of deconstructing a human utterance is untangling the word order

what if protocols are extended to include regurgitation of stories from local news media?

inter-clone conversation
	each clone has an address, ip:port, 127.0.0.1:5795
	each clone has a server socket
	when one clone wants to talk to another
		he can create a client socket to do so
	can a python program use a websocket directly, without the http server?
		or would he use something like wget?


